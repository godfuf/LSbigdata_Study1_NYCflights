---
title: "뉴욕 비행장 데이터 분석"
author: "4조"
format: 
    revealjs:
        logo: fighting4zo.png
        theme: moon
        reference-location: document  # 풋노트 뒤쪽으로 빼는 기능임
        footer: "fighting 4zo"
        css: custom.css
---
## 팀 소개

✈️ **팀 4조**  
- 분석 주제 : **뉴욕 비행장 데이터 분석**  
- 목적 : **항공사 규모와 지연률의 관계 분석**  
- 팀 슬로건 : **Fighting 4zo!** ✊

---

## 분석 목표 및 개요

- **데이터 출처**  
  - nycflights13 패키지 (flights / planes)

- **분석 목표**  
  1. 규모가 큰 항공사 찾기  
  2. 항공사 규모와 지연률의 관계 분석

---

## 데이터 병합 및 전처리

```{python}
#| echo: true
#| output-location: slide
import pandas as pd
import matplotlib.pyplot as plt
from nycflights13 import flights, planes

merge_df = pd.merge(flights, planes, on='tailnum', how='left')

# 날짜 전처리
merge_df['year'] = merge_df['year_x']
merge_df['date'] = pd.to_datetime(merge_df[['year', 'month', 'day']])

# 시간 전처리
merge_df['dep_hour'] = merge_df['hour'].fillna(0).astype(int)
merge_df['dep_minute'] = merge_df['minute'].fillna(0).astype(int)
merge_df['dep_time_str'] = merge_df['dep_hour'].astype(str).str.zfill(2) + ":" + merge_df['dep_minute'].astype(str).str.zfill(2)

# 문자열 전처리
merge_df['carrier'] = merge_df['carrier'].fillna('Unknown').str.strip()
merge_df['tailnum'] = merge_df['tailnum'].fillna('Unknown').str.strip()

merge_df.head(3)
```

---

## 세 공항에서 모두 운항하는 항공사 찾기

```{python}
#| echo: true
#| output-location: slide
airport_count = merge_df.groupby('carrier')['origin'].nunique()
all_list = airport_count[airport_count == 3].index.tolist()
all_list
```

---

## 항공사별 운항 횟수 분석

```{python}
carrier_total_count = merge_df.pivot_table(
    index='carrier',
    values='year_x',
    aggfunc='count'
).reset_index().sort_values(by='year_x', ascending=False)

carrier_total_count
```

```{python}
plt.figure(figsize=(8,5))
plt.bar(carrier_total_count['carrier'], carrier_total_count['year_x'], color='skyblue', edgecolor='black')
plt.title('항공사별 운항 횟수')
plt.xlabel('항공사')
plt.ylabel('운항 횟수')
plt.show()
```

---

## 항공사별 총 비행 거리 분석

```{python}
total_distance = merge_df.groupby('carrier')['distance'].sum().reset_index()
total_distance_sorted = total_distance.sort_values(by='distance', ascending=False)
total_distance_sorted
```

```{python}
plt.figure(figsize=(8,5))
plt.bar(total_distance_sorted['carrier'], total_distance_sorted['distance'], color='lightgreen', edgecolor='black')
plt.title('항공사별 총 비행 거리')
plt.xlabel('항공사')
plt.ylabel('총 거리 (mile)')
plt.show()
```

---

## 항공사별 항공기 보유 수

```{python}
merge_df_count = merge_df.pivot_table(
    index='carrier', 
    values='tailnum',
    aggfunc='nunique'
).reset_index().sort_values(by='tailnum', ascending=False)

merge_df_count
```

---

## 항공사별 총 좌석 수 분석

```{python}
unique_planes = merge_df[['carrier', 'tailnum', 'seats']].drop_duplicates()
total_seat_unique = unique_planes.groupby('carrier')['seats'].sum().reset_index()
total_seat_unique_sorted = total_seat_unique.sort_values(by='seats', ascending=False)

total_seat_unique_sorted
```

```{python}
plt.figure(figsize=(8,5))
plt.bar(total_seat_unique_sorted['carrier'], total_seat_unique_sorted['seats'], color='orange', edgecolor='black')
plt.title('항공사별 총 좌석 수')
plt.xlabel('항공사')
plt.ylabel('좌석 수')
plt.show()
```

---

## 항공기 유형별 보유 수

```{python}
carrier_type = merge_df.groupby(['carrier', 'type'])['tailnum'].nunique().reset_index()
carrier_type.rename(columns={'tailnum': 'plane_count'}, inplace=True)
carrier_type
```

```{python}
carrier_pivot = carrier_type.pivot(index='carrier', columns='type', values='plane_count').fillna(0)

carrier_pivot.plot(kind='bar', stacked=True, figsize=(10,6))
plt.title('항공사별 항공기 유형 분포')
plt.xlabel('항공사')
plt.ylabel('보유 항공기 수')
plt.legend(title='항공기 유형')
plt.show()
```

---

## 항공사 규모와 지연률 관계 분석

```{python}
carrier_delay_mean = merge_df.groupby('carrier')['arr_delay'].mean().reset_index().rename(columns={'arr_delay': 'avg_delay'})

merge_df['is_delayed'] = merge_df['arr_delay'] > 15
delay_ratio = merge_df.groupby('carrier')['is_delayed'].mean().reset_index().rename(columns={'is_delayed': 'delay_ratio'})

delay_analysis = pd.merge(carrier_delay_mean, delay_ratio, on='carrier')
delay_analysis
```

---

## 항공사 규모 vs 지연률 (산점도)

```{python}
plt.figure(figsize=(8,5))
plt.scatter(merge_df_count['tailnum'], delay_analysis['delay_ratio'] * 100, color='purple')
plt.title('항공사 규모(항공기 수) vs 지연 비율')
plt.xlabel('보유 항공기 수')
plt.ylabel('지연 비율 (%)')
plt.grid(True)
plt.show()
```

---

## 결론 및 인사이트

- 규모가 큰 항공사  
  UA, DL, B6  
- 장거리 비행과 좌석 수에서 UA와 DL이 우위  
- 지연률은 규모와 비례하지 않음  
  DL은 규모가 크지만 지연률이 낮음  
- 관리 역량이 핵심 포인트

---

## 결론 및 향후 과제

### 결론
- 규모와 지연률은 단순 비례하지 않음  
- 운영 효율성과 관리가 경쟁력의 핵심  

### 향후 과제
- 시간대/날씨 등 외부 변수 반영한 추가 분석  
- 승객 수요 예측과 노선 수익성 분석 확장

---

## 감사합니다!

### Fighting 4조! ✈️



# output-location: slide

echo: true 로 인해 코드는 앞페이지에
시각화 결과는 뒷페이지에 출력됨
```{python}
#| echo: true
#| output-location: slide
import numpy as np
import pandas as pd
from nycflights13 import flights, planes
import plotly.express as px

fig = px.scatter(
    x = flights['dep_delay'].head(1000),
    y = flights['arr_delay'].head(1000)
)
fig.show()
```


# output-location: column
```{python}
#| echo: true
#| output-location: column
import numpy as np
import pandas as pd
from nycflights13 import flights, planes
import plotly.express as px

fig = px.scatter(
    x = flights['dep_delay'].head(1000),
    y = flights['arr_delay'].head(1000)
)
fig.show()
```

# Tabsets (패널 탭셋)

::: {.panel-tabset}

### code

```{python}
#| echo: true
#| output-location: column
import numpy as np
import pandas as pd
from nycflights13 import flights, planes
import plotly.express as px

fig = px.scatter(
    x = flights['dep_delay'].head(1000),
    y = flights['arr_delay'].head(1000)
)

```

### show

```{python}
fig.show()
```

:::

# Slide Title {background-color="aquamarine"}


# Slide Title {background-color=#806040}


